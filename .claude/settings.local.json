{
  "permissions": {
    "allow": [
      "Bash(curl:*)",
      "Bash(python3:*)",
      "Bash(pip3 install:*)",
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(grep:*)",
      "Bash(brew services:*)",
      "Bash(/opt/homebrew/opt/postgresql@15/bin/psql:*)",
      "Bash(pip install:*)",
      "Bash(source:*)",
      "Bash(python:*)",
      "Bash(git check-ignore:*)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(kill:*)",
      "Bash(pkill:*)",
      "Bash(git commit:*)",
      "Bash(git filter-branch:*)",
      "Bash(rm:*)",
      "Bash(brew install git-filter-repo)",
      "Bash(chmod:*)",
      "Bash(mv:*)",
      "Bash(git rm:*)",
      "Bash(cat:*)",
      "Bash(git remote add:*)",
      "Bash(git merge:*)",
      "Bash(sed:*)",
      "Bash(git reset:*)",
      "Bash(git checkout:*)",
      "Bash(ping:*)",
      "Bash(PGPASSWORD=\"\" psql -U weixiangzhang -d knowledge_base -f database/schema/hr_schema.sql)",
      "Bash(./scripts/privacy_check.sh:*)",
      "Bash(unset API_KEY)",
      "Bash(git gc:*)",
      "Bash(nslookup:*)",
      "Bash(nc:*)",
      "Bash(gh repo edit:*)",
      "Bash(gh repo view:*)",
      "Bash(openssl x509:*)",
      "Bash(./scripts/renew-certificates.sh:*)",
      "Bash(certbot:*)",
      "Bash(brew list:*)",
      "Bash(launchctl:*)",
      "Bash(openssl s_client:*)",
      "Bash(openssl rand:*)",
      "Bash(cp:*)",
      "Bash(true)",
      "Bash(git tag:*)",
      "Bash(PGPASSWORD=\"\" psql -U weixiangzhang -d knowledge_base -c \"SELECT book_id, title, author, word_count FROM books WHERE book_id = 317;\")",
      "Bash(#!/bin/bash\nBOOKS=(\n  \"\"Dawn Octavia\"\"\n  \"\"Chain Gang All Stars\"\"\n)\n\nfor BOOK in \"\"${BOOKS[@]}\"\"\ndo\n  echo \"\"‚è≥ Downloading: $BOOK\"\"\n  docker exec babels-archive-web python3 book_downloader.py \"\"$BOOK\"\"\n  echo \"\"‚è∏Ô∏è Waiting 5 seconds...\"\"\n  sleep 5\ndone)",
      "Bash(#!/bin/bash\nBOOKS=(\n  \"\"Wild Seed Octavia Butler\"\"\n  \"\"A Fire Upon the Deep Vernor Vinge\"\"\n  \"\"The Galaxy and the Ground Within Becky Chambers\"\"\n  \"\"The Fault in Our Stars John Green\"\"\n  \"\"Dragon Springs Road Janie Chang\"\"\n  \"\"The Magician Michael Scott\"\"\n  \"\"The Magic Mountain Thomas Mann\"\"\n  \"\"Will Save the Galaxy for Food Yahtzee Croshaw\"\"\n  \"\"The History of Magic Chris Gosden\"\"\n  \"\"Fight Magic Items Aidan Moher\"\"\n)\n\necho \"\"üéâ PARTY TIME! Downloading ${#BOOKS[@]} awesome books...\"\"\n\nfor BOOK in \"\"${BOOKS[@]}\"\"\ndo\n  echo \"\"‚è≥ Downloading: $BOOK\"\"\n  docker exec babels-archive-web python3 book_downloader.py \"\"$BOOK\"\"\n  echo \"\"‚è∏Ô∏è Waiting 3 seconds...\"\"\n  sleep 3\ndone\n\necho \"\"üéä Download party complete!\"\")",
      "Bash(mkdir:*)",
      "Bash(npx shadcn@latest init:*)",
      "Bash(npm uninstall:*)",
      "Bash(npm install:*)",
      "Bash(npx tailwindcss:*)",
      "Bash(npx playwright:*)",
      "Bash(npm run dev:*)",
      "Bash(npm run build:*)",
      "Bash(npm test:*)",
      "Bash(timeout 30 npx playwright test tests/demo/working-homepage-demo.spec.ts --headed --timeout=10000)",
      "Bash(psql:*)",
      "Bash(createdb:*)",
      "Bash(sqlite3:*)",
      "Bash(pg_isready:*)",
      "Bash(/opt/homebrew/bin/psql --version)",
      "Bash(/opt/homebrew/bin/psql -l)",
      "Bash(/opt/homebrew/Cellar/postgresql@15/15.13/bin/psql:*)",
      "Bash(cd:*)",
      "Bash(git branch:*)",
      "Bash(./scripts/setup_rotation_cron.sh:*)",
      "Bash(env)",
      "Bash(dig:*)",
      "Bash(nmap:*)",
      "WebFetch(domain:webkit.org)",
      "WebFetch(domain:www.apple.com)",
      "Bash(bash:*)",
      "Bash(brew install:*)",
      "Bash(sudo launchctl load:*)",
      "Bash(sudo:*)",
      "Bash(API_KEY=\"babel_secure_8a52a0ad3a1fe3bf3ade37d04deef0054d8f58035a0e9d4760a9a08548d8cebf\" python3 -c \"\nimport requests\nimport json\nimport os\n\napi_key = os.getenv(''API_KEY'')\nheaders = {''Authorization'': f''Bearer {api_key}''}\n\n# Test mascot health endpoint\ntry:\n    response = requests.get(''http://localhost:5000/api/v3/mascot/health'', headers=headers, timeout=5)\n    print(f''=== LEXI MASCOT HEALTH ==='')\n    print(f''Status: {response.status_code}'')\n    if response.status_code == 200:\n        print(f''Response: {json.dumps(response.json(), indent=2)}'')\n    else:\n        print(f''Error Response: {response.text}'')\nexcept Exception as e:\n    print(f''Mascot health error: {e}'')\n\n# Test mascot chat endpoint\ntry:\n    chat_data = {\n        ''query'': ''Hello Lexi! Are you working?'',\n        ''context'': ''testing''\n    }\n    response = requests.post(''http://localhost:5000/api/v3/mascot/chat'', \n                           headers=headers, \n                           json=chat_data,\n                           timeout=10)\n    print(f''\\n=== LEXI MASCOT CHAT ==='')\n    print(f''Status: {response.status_code}'')\n    if response.status_code == 200:\n        print(f''Response: {json.dumps(response.json(), indent=2)}'')\n    else:\n        print(f''Error Response: {response.text}'')\nexcept Exception as e:\n    print(f''Mascot chat error: {e}'')\n\")",
      "Bash(export API_KEY=test_api_key_123)",
      "Bash(echo)"
    ],
    "deny": []
  }
}